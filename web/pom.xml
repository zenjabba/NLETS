<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <name>weboverlay</name>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.wth.nlets</groupId>
    <artifactId>web</artifactId>
    <packaging>war</packaging>
    <version>${customer.version}</version>
    <description>
        Custom Jive WAR. We try to only place files in this project that MUST be overlayed.
        Usually this means there is no way to make the change as a plugin. Most customizations can be done by plugin
        these days, and there
        are many advantages to doing so in terms of packaging, deployment, upgradability and debugging.
        Overlaying a file ensures that you will have to put forth at least some development effort when you want to
        upgrade versions
        of Jive.
    </description>

    <parent>
        <groupId>com.wth.nlets</groupId>
        <artifactId>nlets-ngage</artifactId>
        <version>1</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <properties>
        <plugin.dirs>${basedir}/../subspace-follow/target/subspace-follow-1.0.0-6.0.4.0</plugin.dirs>
        <jrebel.agent></jrebel.agent> <!-- ((do not change) Optional. Only if you want to use JRebel (You will need a JRebel license)) For more information, see cargo-jrebel file -->

        <!-- overridden automatically if <tomcat7.home> is defined in settings.xml -->
        <cargo.tomcat.id>tomcat6x</cargo.tomcat.id>
        <cargo.tomcat.home>${tomcat6.home}</cargo.tomcat.home>
    </properties>

    <build>
        <finalName>${customer.name}-${customer.version}-jive-${jive.version}</finalName>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources-filtered</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>

            <!-- compile all source in src/main/java into target -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>

            <!-- weave aspects -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjtools</artifactId>
                        <version>1.6.9</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <aspectLibraries>
                        <aspectLibrary>
                            <groupId>org.springframework</groupId>
                            <artifactId>spring-aspects</artifactId>
                        </aspectLibrary>
                        <aspectLibrary>
                            <groupId>com.jivesoftware</groupId>
                            <artifactId>jive-core</artifactId>
                        </aspectLibrary>
                    </aspectLibraries>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- create other Jive build artifacts like themes.zip and etc.zip -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>assemble-jive-artifacts</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <!-- Define required version properties as ant filter tokens -->
                                <filter token="build.number" value="${build.number}"/>
                                <filter token="build.vcs.number" value="${build.vcs.number}"/>
                                <filter token="build.project.name" value="${build.project.name}"/>

                                <!-- Define ant-contrib tasks so that the for task is available -->
                                <taskdef resource="net/sf/antcontrib/antlib.xml"
                                         classpathref="maven.compile.classpath"/>

                                <!-- Build themes.zip -->

                                <!-- Copy themes files into ../target/jiveHome/themes for testing  -->
                                <copy todir="${basedir}/../target/jiveHome/themes" overwrite="true">
                                    <fileset dir="${basedir}/src/main/themes">
                                        <include name="**/*"/>
                                    </fileset>
                                </copy>

                                <!-- Copy filtered version file into each theme sub directory -->
                                <for param="themeDir">
                                    <path>
                                        <dirset dir="${basedir}/../target/jiveHome/themes" includes="*"/>
                                    </path>
                                    <sequential>
                                        <copy todir="@{themeDir}" overwrite="yes" filtering="on">
                                            <fileset dir="${basedir}/src/main/resources-filtered/ant" includes="*"/>
                                        </copy>
                                    </sequential>
                                </for>

                                <!-- Now build a new themes.zip for distribution -->
                                <mkdir dir="${project.build.directory}/themes"/>
                                <copy todir="${project.build.directory}/themes" overwrite="yes" filtering="off">
                                    <fileset dir="${basedir}/src/main/themes"
                                             includes="**/*" excludes="**/.svn, **/.svn/**"/>
                                </copy>

                                <!-- Copy filtered version file into each theme sub directory -->
                                <for param="themeDir">
                                    <path>
                                        <dirset dir="${project.build.directory}/themes" includes="*"/>
                                    </path>
                                    <sequential>
                                        <copy todir="@{themeDir}" overwrite="yes" filtering="on">
                                            <fileset dir="${basedir}/src/main/resources-filtered/ant" includes="*"/>
                                        </copy>
                                    </sequential>
                                </for>

                                <zip destfile="${project.build.directory}/themes.zip">
                                    <zipfileset dir="${project.build.directory}/themes" prefix=""/>
                                </zip>

                                <!-- Build an etc.zip for distribution-->

                                <!-- Copy your etc directory to ../target/jiveHome for testing-->
                                <mkdir dir="../target/jiveHome/etc"/>
                                <copy todir="../target/jiveHome/etc" overwrite="true">
                                    <fileset dir="src/main/etc">
                                        <include name="*.xml"/>
                                    </fileset>
                                </copy>
                                <!-- Copy filtered version file into etc sub directory -->
                                <copy todir="../target/jiveHome/etc" overwrite="true" filtering="on">
                                    <fileset dir="${basedir}/src/main/resources-filtered/ant" includes="*"/>
                                </copy>

                                <!-- Built from target to include filtered version file -->
                                <zip destfile="${project.build.directory}/etc.zip">
                                    <zipfileset dir="../target/jiveHome/etc" prefix=""/>
                                </zip>

                            </tasks>
                        </configuration>
                    </execution>

                    <!-- The execution below should be used when a project needs to overlay any Jive bean.properties
                 or resources in the Jive directory "resources.scripts".  In order for these overlay files
                 to actually override their equivalents in the Jive jar, they need to be placed in the
                 Jive jar itself. -->
                    <!--<execution>-->
                    <!--<id>repackage-jive-jar</id>-->
                    <!--<phase>package</phase>-->
                    <!--<goals>-->
                    <!--<goal>run</goal>-->
                    <!--</goals>-->
                    <!--<configuration>-->
                    <!--<tasks>-->
                    <!--Overlay items in the overlay directory into the jar distributed in the war -->
                    <!--<unjar src="./target/${project.build.finalName}/WEB-INF/lib/${jive.core.jar}-${jive.version}.jar"-->
                    <!--dest="./target/${jive.core.jar}-temp-${jive.version}" />-->
                    <!--<copy todir="./target/${jive.core.jar}-temp-${jive.version}" overwrite="true">-->
                    <!--<fileset dir="./src/main/overlay/" includes="**/*"/>-->
                    <!--</copy>-->
                    <!--
                    <copy todir="./target/${jive.core.jar}-temp-${jive.version}-yui" overwrite="true">
                        <fileset dir="./src/main/overlay/" includes="**/*"/>
                    </copy>

                    <touch>
                        <fileset dir="./target/${jive.core.jar}-temp-${jive.version}-yui"/>
                    </touch>
                    -->
                    <!--<taskdef name="yui-compressor"-->
                    <!--classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask"-->
                    <!--classpathref="maven.dependency.classpath"/>-->

                    <!--<yui-compressor-->
                    <!--warn="false"-->
                    <!--munge="true"-->
                    <!--preserveallsemicolons="false"-->
                    <!--todir="./target/${jive.core.jar}-temp-${jive.version}"-->
                    <!--fromdir="./target/${jive.core.jar}-temp-${jive.version}-yui"-->
                    <!--charset="utf8">-->
                    <!--</yui-compressor>-->
                    <!--<jar jarfile="./target/${project.build.finalName}/WEB-INF/lib/${jive.core.jar}-${jive.version}.jar" update="false">-->
                    <!--<fileset dir="./target/${jive.core.jar}-temp-${jive.version}" includes="**/*"/>-->
                    <!--</jar>-->
                    <!--<jar destfile="./target/${project.build.finalName}.war">-->
                    <!--<fileset dir="./target/${project.build.finalName}"/>-->
                    <!--</jar>-->
                    <!--</tasks>-->
                    <!--</configuration>-->
                    <!--</execution>-->
                </executions>
            </plugin>

            <!-- assemble the Jive war file -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1.1</version>
                <configuration>
                    <workDirectory>${basedir}/target/tmp</workDirectory>
                </configuration>
            </plugin>

            <!-- Runs Unit tests, by default any classes that match **/Test*.java, **/*Test.java, or **/*TestCase.java -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>

            <!-- Runs Integration tests, by default any classes that match **/IT*.java, **/*IT.java, or **/*ITCase.java -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <dependencies>

        <dependency>
            <groupId>com.jivesoftware</groupId>
            <artifactId>jive-war</artifactId>
            <type>war</type>
        </dependency>

        <dependency>
            <groupId>com.jivesoftware</groupId>
            <artifactId>jive-core</artifactId>
            <type>jar</type>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
        </dependency>

        <!-- uncomment if running with mysql -->
        <!--<dependency>-->
        <!--<groupId>mysql</groupId>-->
        <!--<artifactId>mysql-connector-java</artifactId>-->
        <!--<scope>provided</scope>-->
        <!--</dependency>-->

        <dependency>
            <groupId>postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- ant-contrib contains "for" task, used in the overlay packaging -->
        <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <version>1.0b3</version>
            <exclusions>
                <exclusion>
                    <groupId>ant</groupId>
                    <artifactId>ant</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant-nodeps</artifactId>
            <version>1.8.1</version>
        </dependency>

        <!-- The dependencies below should be used when a project needs to overlay any resources in the Jive
             directory "resources.scripts".  In order for the minimized Javascript files to be generated, these
             dependencies must be present so the yui-compressor task can run -->
        <!--<dependency>-->
        <!--<groupId>com.jivesoftware</groupId>-->
        <!--<artifactId>yuicompressor</artifactId>-->
        <!--<version>2.2.4_2_0_0_rc1</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--<groupId>com.jivesoftware</groupId>-->
        <!--<artifactId>yuicompressor-anttask</artifactId>-->
        <!--<version>2.4.2</version>-->
        <!--</dependency>-->

    </dependencies>

    <profiles>

        <profile>
            <id>int</id>
            <build>
                <plugins>
                    <!-- Cargo is our main method of running and testing/debugging Jive.  This is the main configuration area. -->
                    <!-- Here is the config reference:  http://cargo.codehaus.org/Maven2+Plugin+Reference+Guide    -->
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven2-plugin</artifactId>
                        <configuration>
                            <!-- Feed them this value; Decides if Cargo should wait after the container is started or not -->
                            <wait>${cargo.wait}</wait>
                            <container>
                                <containerId>${cargo.tomcat.id}</containerId>
                                <home>${cargo.tomcat.home}</home>
                                <timeout>360000</timeout>
                                <systemProperties>
                                    <jive.instance.home>${basedir}/../target/jiveHome</jive.instance.home>
                                    <jive.ws.disabled>true</jive.ws.disabled>
                                    <jive.devMode>true</jive.devMode>
                                    <themes.directory>${basedir}/src/main/themes</themes.directory>
                                    <pluginDirs>${plugin.dirs}</pluginDirs> <!-- if uncommented, must not be empty -->
                                </systemProperties>
                                <dependencies>
                                    <!-- Specify the jdbc connector to use -->
                                    <!--<dependency>-->
                                        <!--<groupId>mysql</groupId>-->
                                        <!--<artifactId>mysql-connector-java</artifactId>-->
                                    <!--</dependency>-->
                                    <dependency>
                                        <groupId>postgresql</groupId>
                                        <artifactId>postgresql</artifactId>
                                    </dependency>
                                </dependencies>
                            </container>
                            <configuration>
                                <home>target/${cargo.tomcat.id}</home>
                                <properties>
                                    <cargo.jvmargs>-Xdebug -Xnoagent
                                        -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n -Xms512m -Xmx1024m
                                        -XX:MaxPermSize=256m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
                                    </cargo.jvmargs>
                                    <cargo.servlet.uriencoding>UTF-8</cargo.servlet.uriencoding>
                                </properties>
                                <deployables>
                                    <deployable>
                                        <location>${project.build.directory}/${project.build.finalName}.war
                                        </location>
                                        <pingURL>http://localhost:8080</pingURL>
                                        <properties>
                                            <context></context>
                                        </properties>
                                    </deployable>
                                </deployables>
                            </configuration>
                        </configuration>
                        <executions>
                            <execution>
                                <id>start-container</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>stop-container</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>

            </build>
        </profile>

        <!-- This profile creates a cargo configuration that runs Tomcat with the exploded war. Running with the
             exploded war reduces the time that it takes for cargo to startup Tomcat. -->
        <profile>
            <id>dev</id>
            <build>
                <plugins>
                    <!-- Cargo is our main method of running and testing/debugging Jive.  This is the main configuration area. -->
                    <!-- Here is the config reference:  http://cargo.codehaus.org/Maven2+Plugin+Reference+Guide    -->
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven2-plugin</artifactId>
                        <configuration>
                            <!-- In the dev profile, cargo will always wait -->
                            <wait>true</wait>
                            <container>
                                <containerId>${cargo.tomcat.id}</containerId>
                                <home>${cargo.tomcat.home}</home>
                                <timeout>36000000</timeout>
                                <systemProperties>
                                    <jive.instance.home>${basedir}/../target/jiveHome</jive.instance.home>
                                    <jive.ws.disabled>true</jive.ws.disabled>
                                    <jive.devMode>true</jive.devMode>
                                    <themes.directory>${basedir}/src/main/themes</themes.directory>
                                    <docverse.enabled>false</docverse.enabled>
                                    <pluginDirs>${plugin.dirs}</pluginDirs> <!-- if uncommented, must not be empty -->
                                </systemProperties>
                                <dependencies>
                                    <!-- specify the jdbc connector to use -->
                                    <!--<dependency>-->
                                        <!--<groupId>mysql</groupId>-->
                                        <!--<artifactId>mysql-connector-java</artifactId>-->
                                    <!--</dependency>-->
                                    <dependency>
                                        <groupId>postgresql</groupId>
                                        <artifactId>postgresql</artifactId>
                                    </dependency>
                                </dependencies>
                            </container>
                            <configuration>
                                <home>target/${cargo.tomcat.id}</home>
                                <properties>
                                    <cargo.jvmargs>
                                        ${jrebel.agent} -Drebel.generate.show=true
                                        -noverify -Xdebug -Xnoagent
                                        -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n -Xms1024m
                                        -Xmx2048m -XX:MaxPermSize=512m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
                                    </cargo.jvmargs>
                                    <cargo.logging>low</cargo.logging>
                                    <cargo.servlet.uriencoding>UTF-8</cargo.servlet.uriencoding>
                                </properties>
                                <deployables>
                                    <deployable>
                                        <location>${project.build.directory}/${project.build.finalName}
                                        </location>
                                        <pingURL>http://localhost:8080</pingURL>
                                        <properties>
                                            <context></context>
                                        </properties>
                                    </deployable>
                                </deployables>
                            </configuration>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.zeroturnaround</groupId>
                            <artifactId>jrebel-maven-plugin</artifactId>
                            <version>1.1.1</version>
                            <executions>
                            <execution>
                                <id>generate-rebel-xml</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <classpath>
                                <fallback>default</fallback>
                                <resources>
                                    <resource>
                                        <directory>${basedir}/target/classes</directory>
                                    </resource>
                                </resources>
                            </classpath>
                            <war>
                                <path>${project.build.directory}/${project.build.finalName}</path>
                            </war>
                            <web>
                              <resources>
                                <resource>
                                  <target>/</target>
                                  <directory>${project.build.directory}/${project.build.finalName}</directory>
                                </resource>
                                <resource><!-- Force default configuration to be last in generated config --></resource>
                              </resources>
                            </web>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>cargo-tomcat7</id>
            <activation>
                <property>
                    <name>tomcat7.home</name>
                </property>
            </activation>
            <properties>
                <cargo.tomcat.id>tomcat7x</cargo.tomcat.id>
                <cargo.tomcat.home>${tomcat7.home}</cargo.tomcat.home>
            </properties>
        </profile>
    </profiles>
</project>
