<!--
  ~ $Revision$
  ~ $Date$
  ~
  ~ Copyright (C) 1999-2010 Jive Software. All rights reserved.
  ~
  ~ This software is the proprietary information of Jive Software. Use is subject to license terms.
  -->

{namespace jive.home autoescape="contextual"}

/**
 * Renders the content section for user's home page.
 *
 * @param activityStream - the current stream for the viewing user
 * @param activityStream4JS - the current stream bean that will be JSON-serialized for the controller (stripped down from activityStream)
 * @param streamDisplayName
 * @param streamType
 * @param streamID
 * @param recommenderEnabled - True if the recommender side bar should be shown
 * @param connectionsInfoClosed true if the user has already closed the stream info box, false otherwise.
 * @param infoType 1 for a community with less than 10 users, 2 for a community with more than 10 users
 * @param infoUser the user object to display in the info box
 * @param latestStatusUpdate - the last status update of the viewing user, or empty string
 * @param? dmEnabled - true if direct messages are enabled
 * @param? canViewStatusUpdates - true if the user can view status updates
 * @param? statusUpdatesEnabled
 * @param? focusStatusUpdate - true to immediately focus the microblogging input field
 * @param preferredMode - RTE option
 * @param startMode - RTE option
 * @param mobileUI - RTE option
 * @param communityName - RTE option
 * @param pollingInterval - Recommender polling interval
 * @param homeNavHelper properties for home nav
 * @param invitationLink A link to the invitation framework
 * @param numUpdatesSinceRefresh
 * @param communityFeedback
 * @param quickTip
 * @param hasImagePerms
 * @param isTrialActive true if the user is not anonymous and the trial is enabled and active
 * @param createMenuData
 * @param hasInvitations
 * @param hasPendingApprovals
 *
 * @depends path=/resources/scripts/apps/browse/activity/info/views/activity_info_view.js
 * @depends path=/resources/scripts/apps/direct_messaging/main.js
 * @depends path=/resources/scripts/apps/activity_stream_builder/activity_stream_builder_controller.js
 * @depends path=/resources/scripts/jive/acclaim.js
*/
{template .main}

    <head>
        <title>{$streamDisplayName}</title>
        <meta name="nav.active.link" content="jive-nav-link-home" />
        <meta name="rte" value="true" />
    </head>

    <body class="j-body-home">
        <!-- BEGIN layout -->
        <div class="j-layout j-layout-sl clearfix j-contained j-rc5" id="j-streams-main">
            // Sidebar layout
            <div class="j-column-wrap-s">
                <nav class="j-column j-column-s" role="navigation" aria-label="{i18nText('eae.stream.nav')}">
                    {call jive.welcome.homeSideNav}
                        {param homeNavHelper: $homeNavHelper/}
                        {param selectedLinkID}
                            {if $streamType == 'all'}
                                jive-nav-link-activity
                            {elseif $streamType == 'connections'}
                                jive-nav-link-connections
                            {elseif $streamType == 'watches'}
                                jive-nav-link-watches
                            {else}
                                jive-nav-link-custom-{$streamID}
                            {/if}
                        {/param}
                    {/call}
                </nav>
            </div>

            <!-- BEGIN large column -->
            <div class="j-column-wrap-l">
                <div id="j-dynamic-pane" class="j-column j-column-l">
                    {call .dynamicPaneContents}
                        {param activityStream: $activityStream /}
                        {param activityStream4JS: $activityStream4JS /}
                        {param streamDisplayName: $streamDisplayName /}
                        {param streamType: $streamType /}
                        {param streamID: $streamID /}
                        {param recommenderEnabled: $recommenderEnabled /}
                        {param pollingInterval: $pollingInterval /}
                        {param invitationLink: $invitationLink /}
                        {param connectionsInfoClosed: $connectionsInfoClosed /}
                        {param infoType: $infoType /}
                        {param infoUser: $infoUser /}
                        {param latestStatusUpdate: $latestStatusUpdate /}
                        {param dmEnabled: $dmEnabled /}
                        {param canViewStatusUpdates: $canViewStatusUpdates /}
                        {param statusUpdatesEnabled: $statusUpdatesEnabled /}
                        {param preferredMode: $preferredMode /}
                        {param startMode: $startMode /}
                        {param mobileUI: $mobileUI /}
                        {param communityName: $communityName /}
                        {param numUpdatesSinceRefresh: $numUpdatesSinceRefresh /}
                        {param invitationLink: $homeNavHelper.invitationLink /}
                        {param communityFeedback: $communityFeedback /}
                        {param quickTip: $quickTip /}
                        {param hasImagePerms: $hasImagePerms /}
                        {param isTrialActive: $isTrialActive /}
                        {param focusStatusUpdate: $focusStatusUpdate /}
                        {param createMenuData: $createMenuData /}
                        {param hasInvitations: $hasInvitations /}
                        {param hasPendingApprovals: $hasPendingApprovals /}
                    {/call}
                </div>
            </div>
        </div>
    </body>
{/template}

/**
 * Renders the content section for user's home page.
 *
 * @param activityStream - the current stream for the viewing user
 * @param activityStream4JS - the current stream bean that will be JSON-serialized for the controller (stripped down from activityStream)
 * @param streamDisplayName
 * @param streamType
 * @param streamID
 * @param recommenderEnabled - True if the recommender side bar should be shown
 * @param pollingInterval
 * @param invitationLink
 * @param connectionsInfoClosed true if the user has already closed the stream info box, false otherwise.
 * @param infoType 1 for a community with less than 10 users, 2 for a community with more than 10 users
 * @param infoUser the user object to display in the info box
 * @param latestStatusUpdate - the last status update of the viewing user, or empty string
 * @param dmEnabled - true if direct messages are enabled
 * @param canViewStatusUpdates - true if the user can view status updates
 * @param statusUpdatesEnabled
 * @param preferredMode - RTE option
 * @param startMode - RTE option
 * @param mobileUI - RTE option
 * @param communityName - RTE option
 * @param numUpdatesSinceRefresh
 * @param communityFeedback
 * @param quickTip
 * @param hasImagePerms
 * @param isTrialActive true if the user is not anonymous and the trial is enabled and active
 * @param createMenuData
 * @param? focusStatusUpdate - true to immediately focus the microblogging input field
 * @param? hasInvitations
 * @param? hasPendingApprovals
 * @depends path=/resources/scripts/apps/trial/views/trial_tip_helper.js
 * @depends path=/resources/scripts/apps/browse/user/model/user_source.js
 * @depends path=/resources/scripts/apps/microblogging/status_input_mb_controller.js
 */
{template .dynamicPaneContents}
    <div id="j-activity-page" class="j-stream">
        {call jive.eae.recommendation.homeRecommendationSidebar}
            {param recommenderEnabled: $recommenderEnabled /}
            {param user: $activityStream.viewingUser /}
            {param pollingInterval: $pollingInterval /}
            {param communityFeedback: $communityFeedback /}
            {param quickTip: ($isTrialActive ? $quickTip : false) /}
			
			/* HEDLOC Start */
			/* Adds Social News and then Latest Likes to the right hand side bar */
			
			{param additionalContent}
				{foreach $activityContainer in $activityStream.activityContainerList}
					{if length($activityContainer.activityList) > 0}
						/* If the activity container type is latest likes, display the container. */
						{if $activityContainer.jiveObject.objectType == 447369365}
							{call jive.eae.activitystream.groupedActivityStreamItem}
								{param activityContainer: $activityContainer /}
								{param user: $activityStream.viewingUser /}
								{param streamType: $streamType /}
								{param filterType: List('all') /}
								{param canCreateMbImage: $activityStream.canCreateMbImage /}
								{param canCreateMbVideo: $activityStream.canCreateMbVideo /}
								{param mobileUI: $mobileUI /}
								{param sidebar: 'sidebar'/}
							{/call}
						{/if}
					{/if}
				{/foreach}
				{foreach $activityContainer in $activityStream.activityContainerList}
					{if length($activityContainer.activityList) > 0}
						/* If the activity container type is social news, display the container. */
						{if $activityContainer.jiveObject.objectType == -1864883264}
							{call jive.eae.activitystream.groupedActivityStreamItem}
								{param activityContainer: $activityContainer /}
								{param user: $activityStream.viewingUser /}
								{param streamType: $streamType /}
								{param filterType: List('all') /}
								{param canCreateMbImage: $activityStream.canCreateMbImage /}
								{param canCreateMbVideo: $activityStream.canCreateMbVideo /}
								{param mobileUI: $mobileUI /}
								{param sidebar: 'sidebar'/}
							{/call}
						{/if}
					{/if}
				{/foreach}
			{/param}
			
			/* HEDLOC End */
        {/call}
		
		<div class="j-stream-container" role="main" aria-labeledby="js-activity-heading">

			<div class="j-create-container" role="group" aria-label="{i18nText('global.create')}">
	            {call .activityStreamCreateMenu}
	                {param createMenuData: $createMenuData /}
	                {param canCreateStatusUpdates: $activityStream.canCreateMbEntry /}
	            {/call}

	            {if $activityStream.canCreateMbEntry and not $activityStream.viewingUser.anonymous}
	                <div class="j-main-mb-entry" role="application">
	                    {call jive.shared.soy.resourceInlineJs}
                            {param code}
                                $j(function() {lb}
                                    jive.ActivityStream.MBController = new jive.MicroBlogging.MBController();
                                    {if $focusStatusUpdate}
                                        jive.ActivityStream.MBController.getMicrobloggingView().focus();
                                    {/if}
                                {rb});
                            {/param}
                        {/call}
	                    {call jive.statusinput.containers.microbloggingStatusInput}
	                        {param statusID:'mb-header-editor' /}
	                        {param user:$activityStream.viewingUser /}
	                        {param latestStatusUpdate: $latestStatusUpdate /}
	                        {param canCreateMbImage: $activityStream.canCreateMbImage /}
	                        {param canCreateMbVideo: $activityStream.canCreateMbVideo /}
	                        {param canAtMention: not $mobileUI /}
	                        {param focusStatusUpdate: $focusStatusUpdate /}
	                    {/call}
	                </div>
	            {/if}
			</div>
			
            {call jive.eae.activitystream.streamSpecificFilters}
                {param streamDisplayName: $streamDisplayName /}
                {param streamType: $streamType /}
                {param selectedFilter: List('all') /}
                {param recommenderEnabled: $recommenderEnabled /}
                {param canViewStatusUpdates: $canViewStatusUpdates /}
                {param numUpdatesSinceRefresh: $numUpdatesSinceRefresh /}
            {/call}

            {call .renderActivityStream}
                {param activityStream: $activityStream /}
                {param activityStream4JS: $activityStream4JS /}
                {param streamDisplayName: $streamDisplayName /}
                {param streamType: $streamType /}
                {param streamID: $streamID /}
                {param dmEnabled: $dmEnabled /}
                {param recommenderEnabled: $recommenderEnabled /}
                {param canViewStatusUpdates: $canViewStatusUpdates /}
                {param statusUpdatesEnabled: $statusUpdatesEnabled /}
                {param preferredMode: $preferredMode /}
                {param startMode: $startMode /}
                {param mobileUI: $mobileUI /}
                {param communityName: $communityName /}
                {param connectionsInfoClosed: $connectionsInfoClosed /}
                {param infoType: $infoType /}
                {param infoUser: $infoUser /}
                {param invitationLink: $invitationLink /}
                {param hasImagePerms: $hasImagePerms /}
            {/call}
		</div>

        {if $infoUser.partner}
            {call .partnerActivityWelcome}
                {param hasInvitations: $hasInvitations /}
                {param hasPendingApprovals: $hasPendingApprovals /}
            {/call}
        {/if}
    </div>
{/template}

/**
 * @param activityStream - the current stream for the viewing user
 * @param activityStream4JS - the current stream bean that will be JSON-serialized for the controller (stripped down from activityStream)
 * @param streamDisplayName
 * @param streamType
 * @param streamID
 * @param recommenderEnabled - True if the recommender side bar should be shown
 * @param dmEnabled - true if direct messages are enabled
 * @param canViewStatusUpdates - true if the user can view status updates
 * @param statusUpdatesEnabled
 * @param preferredMode - RTE option
 * @param startMode - RTE option
 * @param mobileUI - RTE option
 * @param communityName - RTE option
 * @param connectionsInfoClosed
 * @param infoType
 * @param infoUser
 * @param invitationLink
 * @param hasImagePerms
 */
{template .renderActivityStream}
    <div id="j-activity-streams-wrapper" class="j-stream">
        <div id="previewable-binary-viewer"></div>
        <div id="j-stream" class="j-act j-stream-list j-main-stream j-act-stream {if not $mobileUI}j-not-mobile{/if}">
            {call jive.eae.activitystream.activityStream}
                {param activityStream: $activityStream /}
                {param activityStream4JS: $activityStream4JS /}
                {param streamDisplayName: $streamDisplayName /}
                {param streamType: $streamType /}
                {param streamID: $streamID /}
                {param viewingUser: $activityStream.viewingUser /}
                {param dmEnabled: $dmEnabled /}
                {param recommenderEnabled: $recommenderEnabled /}
                {param canViewStatusUpdates: $canViewStatusUpdates /}
                {param statusUpdatesEnabled: $statusUpdatesEnabled /}
                {param preferredMode: $preferredMode /}
                {param startMode: $startMode /}
                {param mobileUI: $mobileUI /}
                {param communityName: $communityName /}
                {param connectionsInfoClosed: $connectionsInfoClosed /}
                {param infoType: $infoType /}
                {param infoUser: $infoUser /}
                {param invitationLink: $invitationLink /}
                {param hasImagePerms: $hasImagePerms /}
            {/call}
        </div>
    </div>
{/template}

/**
 * @param createMenuData
 * @param canCreateStatusUpdates
 * @depends template=jive.nav.menu.create.contentTypeHref
 * @depends path=/resources/scripts/apps/activity_stream/activity_stream_create_menu_view.js
 * @depends i18nKeys=nav.bar.create.*
 */
{template .activityStreamCreateMenu}
    {if $createMenuData.visible}
        {call jive.shared.soy.resourceInlineJs}
            {param code}
                $j(function() {lb}
                    jive.ActivityStream.GlobalCreateMenuView = new jive.ActivityStream.CreateMenuView({lb}
                        createMenuData: {buildJson($createMenuData)|noAutoescape}
                    {rb});
                    jive.ActivityStream.GlobalCreateMenuView.postRender();
                {rb});
            {/param}
        {/call}
        <div id="j-as-create-menu" aria-hidden="true">
            <a href="#" id="as-create-menu-more" class="j-as-create-menu-more" style="display:none;">
                <span class="lnk">
                    {i18nText('global.more')}
                </span>
                <span class="jive-icon-med jive-icon-down j-filter-icon"></span>
            </a>
            <div id="j-as-create-menu-items">
                <span class="j-as-create-item" role="heading">
                    <span class="j-ui-elem j-create-icon"></span>
                    <span class="font-color-meta-light">{i18nText('global.create')}:</span>
                </span>
                {if $canCreateStatusUpdates}
                    <span class="j-as-create-status-update j-as-create-item" title="{i18nText('nav.bar.create.description.status')}">
                        <span class="jive-icon-status jive-icon-med"></span>{i18nText('nav.bar.create.status')}
                    </span>
                {/if}
                {foreach $section in $createMenuData.sections}
                    {if $section.name == 'nav.bar.create.section.content' and $section.visible}
                        {foreach $item in $section.items}
                            {call .activityStreamCreateMenuItem}
                                {param item: $item /}
                            {/call}
                        {/foreach}
                    {/if}
                {/foreach}
            </div>
        </div>
        <div id="j-as-create-menu-pop" class="j-pop-main j-quick-menu" style="display:none;"></div>
        <script>
            // want this script to run inline so the "more" button showing/hiding is handled as soon
            // as the menu is drawn.  Depends only on jQuery.
            (function() {lb}
                var $upMenu = $j('#j-as-create-menu-items'),
                    $menuItems = $upMenu.find('.j-as-create-item'),
                    $moreBtn = $j('#as-create-menu-more'),
                    upMenuWidth = $upMenu.outerWidth(true),
                    createMenuItemsTotalWidth = 0;
                $menuItems.each(function() {lb}
                    createMenuItemsTotalWidth += $j(this).outerWidth(true);
                {rb});
                if (upMenuWidth >= createMenuItemsTotalWidth - 1) {lb}
                    $moreBtn.hide();
                {rb}
                else {lb}
                    $moreBtn.show();
                {rb}
            {rb})();
        </script>
    {/if}
{/template}

/**
 * @param item
 */
{template .activityStreamCreateMenuItem}
    {if $item.nameKey != 'nav.bar.create.status' and $item.visible}
        <a href="
            {call .contentTypeHref data="$item"}
                {param legacy: length(match($item.linkCss, 'js-legacy-create')) > 0/}
            {/call}"
            class="{$item.linkCss} j-as-create-item"
            title="{i18nText($item.descriptionKey)}"
            {if $item.urlParams and $item.urlParams.contentType}
                {sp}data-content-type="{$item.urlParams.contentType}"
            {/if}
            {if length(match($item.linkCss, 'quick')) > 0}
                {sp}data-quick-create-url="{call .contentTypeHref data="$item"}{param legacy: true /}{/call}"
            {/if}
                {sp}data-ident="{$item.nameKey}">
            <span class="{$item.iconCss} jive-icon-med"></span>
            {i18nText($item.nameKey)}
        </a>
    {/if}
{/template}

/**
 * @param menuItems
 */
{template .activityStreamCreateMenuPopover}
    <ul class="j-icon-list">
        {foreach $item in $menuItems}
            <li>
                {call .activityStreamCreateMenuItem}
                    {param item: $item /}
                {/call}
            </li>
        {/foreach}
    </ul>
{/template}

/**
 * Returns the appropriate href value for a given content type link.
 *
 * @param url a create URL associated iwth this content type
 * @param urlParams parameters associated with this content type
 * @param? legacy if true outputs an actual href
 */
{template .contentTypeHref}
    {if $legacy}
        {if $urlParams}{buildUrl($url, extend(Map(p('sr', 'amenu')), $urlParams))}{else}{buildUrl($url, Map(p('sr', 'amenu')))}{/if}
    {else}
        javascript:void(0)
    {/if}
{/template}

/**
 * Renders newCount
 * @param? count
 */
{template .newCount}
    {if $count > 50}
        50+
    {else}
        {$count}
    {/if}
{/template}

/**
 * Renders updateBadge
 */
{template .updateBadge}
    <div />
{/template}

/**
  * Returns the title for the page.
  *
  * @param count
  */
{template .countForTitle}
    ({call .newCount}
        {param count:$count /}
    {/call})
{/template}

/**
 * Activity welcome block for new users
 *
 * @param hasInvitations
 * @param hasPendingApprovals
 * @depends path=/resources/scripts/partner/action_page.js
 */
{template .partnerActivityWelcome}
    {if $hasInvitations}
        {if not $hasPendingApprovals}
            <div class="j-partner-welcome clearfix j-rc3">
                <span class="j-arrow"></span>
                <span role='img' title='{i18nText('global.group')}' class="jive-icon-huge jive-icon-group"></span>
                <h1 class="font-face-deco">{i18nText('partner.activity.welcome.title')}</h1>
                <p>{i18nText('partner.activity.welcome.body')}</p>
            </div>
        {else}
            <div class="j-partner-welcome j-act-empty clearfix font-color-normal">
                <h2>{i18nText('partner.activity.moderation.title')}</h2>
                <p>{i18nText('partner.activity.moderation.body')}</p>
                <img src="{resourceUrl('/images/stream-intro/sample.png')}" alt="{i18nText('eae.activitystream.example.image')}" />
            </div>
        {/if}
    {else}
        <div class="j-partner-welcome j-act-empty clearfix font-color-normal">
            <h2>{i18nText('partner.activity.noinvitations.title')}</h2>
            <p>{i18nText('partner.activity.noinvitations.body')}</p>
            <img src="{resourceUrl('/images/stream-intro/sample.png')}" title="{i18nText('eae.activitystream.example.image')}" alt="{i18nText('eae.activitystream.example.image')}" />
        </div>
    {/if}
    <script>
        $j(function() {lb}
            // hide until action_page.js has a chance to load groups, then show partner welcome if no groups, or the
            // rest if there are groups
            jive.partner.actionPage.init();
            jive.partner.actionPage.loadGroups();
        {rb});
    </script>
{/template}